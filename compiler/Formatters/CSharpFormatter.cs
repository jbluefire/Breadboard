using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace Breadboard.Compiler.Formatters
{
    class CSharpFormatter : Formatter
    {
        public const string Extension = ".cs";

        public override string Description { get { return "C#"; } }

        public override bool Format(Unit unit, string outDir)
        {
            try
            {
                var context = new Context()
                {
                    Unit = unit,
                    Target = Path.Combine(outDir, unit.BaseName + Extension)
                };
                using (var writer = new StreamWriter(new FileStream(context.Target, FileMode.Create)))
                {
                    context.Writer = writer;
                    context.Format();
                    writer.Flush();
                }
                return true;
            }
            catch (IOException)
            {
                // may be in the middle of processing
                return true;
            }
            catch (Exception e)
            {
                Program.IncrementErrorCount();
                Console.Error.WriteLine(e);
                return false;
            }
        }

        public override bool IsUpToDate(string path, string outDir)
        {
            var baseName = Path.GetFileNameWithoutExtension(path);
            var target = Path.Combine(outDir, baseName + Extension);
            return File.Exists(target) &&
                   File.GetLastWriteTime(target) >= File.GetLastWriteTime(path);
        }

        private class Context
        {
            public Unit Unit { get; set; }
            public string Target { get; set; }
            public StreamWriter Writer { get; set; }

            public void Format()
            {
                FormatHead();
                FormatBody();
            }

            private void FormatHead()
            {
                var o = Writer;
                o.WriteLine("// auto-generated by Breadboard compiler");
                o.WriteLine();
                o.WriteLine("using System;");
                o.WriteLine("using System.Collections.Generic;");
                o.WriteLine("using System.Text;");
                o.WriteLine();
                o.WriteLine("using Breadboard;");
                o.WriteLine();

                foreach (var reference in Unit.References)
                {
                    if (reference.Type == ReferenceType.Namespace)
                    {
                        o.WriteLine($"using {reference.Target.Replace('/', '.')};");
                    }
                }
            }

            private void FormatBody()
            {
                var o = Writer;
                if (!string.IsNullOrEmpty(Unit.Namespace))
                {
                    o.WriteLine();
                    o.WriteLine($"namespace {Unit.Namespace.Replace('/', '.')} {{");
                }

                foreach (var def in Unit.Definitions)
                {

                }

                if (!string.IsNullOrEmpty(Unit.Namespace))
                {
                    o.WriteLine();
                    o.WriteLine($"}}  // namespace {Unit.Namespace.Replace('/', '.')}");
                }
            }
        }

    }
}
